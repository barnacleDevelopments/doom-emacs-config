#+title: Doom Config

Reference: https://leanpub.com/lit-config/read

* General Settings
#+begin_src elisp :tangle ./config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq avy-all-windows t)
(setq display-line-numbers-type 'relative)
(setq display-line-numbers-type t)

;; Relative Line Numbers
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode +1)

(defun eslint-fix-file ()
  (interactive)
  (message "npx eslint --fixing the file" (buffer-file-name))
  (shell-command (concat "npx eslint --fix " (buffer-file-name))))

(defun eslint-fix-file-and-revert ()
  (interactive)
  (eslint-fix-file)
  (revert-buffer t t))

;; (add-hook 'js2-mode-hook
;;           (lambda ()
;;             (add-hook 'after-save-hook #'eslint-fix-file-and-revert)))
#+end_src
** Mac Config
#+begin_src elisp :tangle ./config.el
; Mac Config
(use-package! exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :config
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
(setenv "GIT_SSH_COMMAND" "ssh -v")
(setq lsp-disabled-clients '(rubocop-ls))
#+end_src
* Package-specific configurations
** Treemacs
#+begin_src elisp :tangle ./config.el
(setq! doom-themes-treemacs-theme "doom-colors")
(setq! treemacs-width 45)
#+end_src
** Doom
*** Configuration
#+begin_src elisp :tangle ./config.el
(setq! doom-font (font-spec :size 20))
(setq! doom-theme 'doom-palenight)
#+end_src
** Org
*** TODO Learn about optimizing tasks and notes
*** TODO When Clocking in add billable option/tag automatically
*** Configuration
**** Configuring org-directory
#+begin_src elisp :tangle ./config.el
(setq org-directory "~/my-org-roam/")
#+END_SRC
**** Agenda
#+begin_src elisp :tangle ./config.el
(setq org-agenda-todo-ignore-scheduled 'future)
(setq org-agenda-start-day "-1d")
(setq org-agenda-span 5)
(setq org-agenda-files '(
        "~/my-org-roam/daily"
        "~/my-org-roam/work-org-roam/daily"
        "~/my-org-roam/work-org-roam/tickets"
        "~/my-org-roam/sources"
        "~/doom/config.org"
))
(defun org-export-to-markdown-and-copy-clean ()
  "Export Org buffer to Markdown, remove <a> tags and TOC, copy to clipboard without saving a file."
  (interactive)
  (let* ((raw-md (org-export-as 'md))
         ;; Remove <a id="..."></a> tags
         (no-anchors (replace-regexp-in-string "<a id=\"[^\"]+\"></a>\n?" "" raw-md))
         ;; Remove 'Table of Contents' section
         (clean-md (replace-regexp-in-string
                    "# Table of Contents\n\\(?:.*\n\\)*?\n\\{1,2\\}# " "# "
                    no-anchors)))
    (with-temp-buffer
      (insert clean-md)
      (clipboard-kill-region (point-min) (point-max)))
    (message "Clean Markdown (no TOC, no anchors) copied to clipboard.")))

(with-eval-after-load 'org
  (map! :map org-mode-map
        :localleader
        "e m" #'org-export-to-markdown-and-copy-clean))

#+end_src
**** Templating
***** Configuration
#+begin_src elisp :tangle ./config.el
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-todo-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
(add-hook 'org-after-todo-statistics-hook #'org-summary-todo)

(setq org-capture-templates
      '(("c" "Cookbook" entry (file "~/my-org-roam/cookbook.org")
         "%(org-chef-get-recipe-from-url)"
         :empty-lines 1)))
#+END_SRC
**** Roam
***** Configuration
# https://orgmode.org/manual/Template-elements.html
#+begin_src elisp :tangle ./config.el
(setq org-roam-directory "~/my-org-roam")
(org-roam-db-autosync-mode)
#+end_src
***** Templates
****** TODO Recipe template
****** Configuration
#+begin_src elisp :tangle ./config.el
(setq org-roam-dailies-capture-templates
      `(("d" "default" plain
         "%?"
         :target (file+head "%<%Y-%m-%d>.org"
                            ,(concat "#+title: %<%Y-%m-%d>\n\n"
                                     "* Goals"))
         :unnarrowed t
         )
        ("e" "Event Temple" plain
         "%?"
         :target (file+head "~/my-org-roam/work-org-roam/daily/%<%Y-%m-%d>-et.org"
                            ,(concat "#+title: %<%Y-%m-%d>\n\n"
                                     "* Goals this Quarter\n"
                                     "- I'm responsible for NFE bugs.\n"
                                     "- goal is to increase adoption of NFE by 60%.\n\n"
                                     "* Standup\n** Yesterday\n** Today\n** Blockers\n** Action Items"))
         :unnarrowed t
         )))

(setq org-roam-capture-templates
      `(("t" "Ticket" plain
         "%?"
         :target (file+head "work-org-roam/tickets/%<%Y%m%d%H%M%S>-${slug}.org"
                            ,(concat "#+title: ${title}\n"
                                     "#+created: %U\n"
                                     "#+filetags: :ticket:\n"
                                     "#+jira_ticket_url: %^{JiraTicketURL}\n"
                                     "#+figma_url: %^{FigmaDesignURL}\n"
                                     "#+pull_request_url: \n"
                                     "* Description\n"
                                     "%^{Description}\n\n"
                                     "* Pull Request\n"
                                     "** Description\n"
                                     "** How to test\n\n"
                                     "* Checklist\n"
                                     "** TODO Complete [0/6]\n"
                                     "*** [ ] Write tests\n"
                                     "*** [ ] Create pull request\n"
                                     "*** [ ] Apply feedback if any\n"
                                     "*** [ ] Deploy to staging\n"
                                     "*** [ ] Deploy to production\n"
                                     "*** [ ] Create release note using template in Slack\n"))
         :unnarrowed t)
        ("p" "Project" plain
         "%?"
         :target (file+head "work-org-roam/projects/%<%Y%m%d%H%M%S>-${slug}.org"
                            ,(concat "#+title: ${title}\n"
                                     "#+created: %U\n"
                                     "#+filetags: :project:\n\n"
                                     "* Description\n"
                                     "%^{Description}\n\n"
                                     "* Checklist\n"
                                     "** TODO Complete [0/6]\n"
                                     "*** [ ] Write tests\n"
                                     "*** [ ] Create pull request\n"
                                     "*** [ ] Apply feedback if any\n"
                                     "*** [ ] Deploy to staging\n"
                                     "*** [ ] Deploy to production\n"
                                     "*** [ ] Create release note using template in Slack\n"))
         :unnarrowed t)
        ("b" "Post" plain
         "%?"
         :target (file+head "posts/%<%Y%m%d%H%M%S>-${slug}.org"
                            ,(concat "#+title: ${title}\n"
                                     "#+created: %U\n"
                                     "#+filetags: :post:\n\n"
                                     "* Description\n"
                                     "%^{Description}\n\n"
                                     "* Checklist\n"
                                     "** TODO Post to website\n"
                                     "** TODO Make LinkedIn Post\n"))
         :unnarrowed t)
        ("s" "Source" plain
         "%?"
         :target (file+head "sources/%<%Y%m%d%H%M%S>-${slug}.org"
                            ,(concat "#+title: ${title}\n"
                                     "#+created: %U\n"
                                     "#+filetags: :%^{tag}:\n\n"
                                     "* Description\n"
                                     "%^{Description}\n\n"
                                     "* References\n"
                                     "- \n"
                                     "* Checklist\n"
                                     "** TODO Review\n"
                                     ))
         :unnarrowed t)))
#+end_src
**** Blog Post Writing
#+begin_src emacs-lisp :tangle ./config.el
(setq org-export-show-temporary-export-buffer nil)
(defun my/org-to-md-on-save ()
  "Export Org file to Hugo-compatible Markdown cleanly, strip heading IDs, and copy it to the destination directory."
  (when (and (eq major-mode 'org-mode)
             (buffer-file-name)
             (string-prefix-p (expand-file-name "~/org-roam/posts/")
                              (expand-file-name (buffer-file-name))))
    ;; Don't show temporary export buffer
      (let* ((base-name (file-name-base (buffer-file-name)))
             (exported-md (org-hugo-export-as-md)))
        (when (buffer-live-p exported-md)
          (let* ((destination-dir (expand-file-name "~/WebDev/Projects/PersonalSite/content/blog/"))
                 (title (replace-regexp-in-string "[[:digit:]]\\{14\\}-" "" base-name))
                 (destination-file (expand-file-name (concat title ".mdx") destination-dir)))
            (with-current-buffer exported-md
              ;; ðŸ§¹ Strip {#id} before saving
              (save-excursion
                (goto-char (point-min))
                (while (re-search-forward " {#\\([^}]+\\)}" nil t)
                  (replace-match "")))
              (write-region (point-min) (point-max) destination-file))
            (kill-buffer exported-md))))))
(add-hook 'after-save-hook 'my/org-to-md-on-save)
#+end_src
** Slack
*** TODO Implement slack integration
https://github.com/emacs-slack/emacs-slack
** FlyCheck
#+begin_src elisp :tangle ./config.el
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook! 'typescript-mode
  (lambda ()
    (flycheck-select-checker 'javascript-eslint)))
#+end_src
** Web Mode
*** Configuration
#+begin_src elisp :tangle ./config.el
(use-package! web-mode
  :mode ("\\.ejs\\'" . web-mode)
  :config
  (setq web-mode-content-types-alist
        '(("html" . "\\.ejs\\'")))
  (setq web-mode-engines-alist
        '(("ejs" . "\\.ejs\\'"))))
#+end_src
** Projectile
*** Configuration
#+begin_src elisp :tangle ./config.el
(setq projectile-project-search-path '("~/WebDev/"))
#+end_src
** Robe
#+begin_src elisp :tangle ./config.el
(add-hook 'ruby-mode-hook 'robe-mode)
(add-hook 'ruby-ts-mode-hook 'robe-mode)
** Prettier
*** Configuration
#+begin_src elisp :tangle ./config.el
(use-package! prettier
  :hook (
         (js-mode . prettier-mode)
         (typescript-mode . prettier-mode)
         (css-mode . prettier-mode)
         (html-mode . prettier-mode)
         (markdown-mode . prettier-mode)
         (terraform-mode . prettier-mode))
)
#+END_SRC
** LSP
*** Configuration
#+begin_src elisp :tangle ./config.el
(setq lsp-idle-delay 0.500)  ; Increase delay to half a second (default is 0.1)
(setq lsp-enable-on-type-formatting nil)  ; Disable auto-formatting on typing
(setq lsp-file-watch-ignored-directories
      '("[/\\\\]\\.git$"
        "[/\\\\]node_modules$"
        "[/\\\\]build$"
        "[/\\\\]dist$"))
(setq lsp-file-watch-threshold 1000)  ;; Increase threshold to 1000 files
(after! lsp-mode
  (setq lsp-enable-on-type-formatting nil)  ;; Disable on-type formatting
  (setq lsp-signature-auto-activate nil)    ;; Disable signature help
  (setq lsp-modeline-code-actions-enable nil) ;; Disable code actions in modeline
  (setq lsp-modeline-diagnostics-enable nil) ;; Disable diagnostics in modeline
  (setq lsp-diagnostics-provider :auto) ;; Disable diagnostics in modeline
        )
(after! lsp-mode
  (setq lsp-typescript-auto-import-completions nil)) ;; Disable auto-imports
#+END_SRC
** Compiler
*** Configuration
#+begin_src elisp :tangle ./config.el
(defun my-compilation-mode-hook ()
  (setq truncate-lines nil) ;; automatically becomes buffer local
  (set (make-local-variable 'truncate-partial-width-windows) nil))
(add-hook! 'compilation-mode-hook 'my-compilation-mode-hook)
#+END_SRC
** GPTEL
[[https://github.com/karthink/gptel?tab=readme-ov-file#chatgpt][GPTEL Docs]]
*** Configuration
#+begin_src elisp :tangle ./config.el
(setq! gpt-api-key (getenv "CHAT_GPT_API_KEY"))
;; (use-package! gptel
;;  :config
;;  (setq! gptel-api-key gpt-api-key))

;; (gptel-make-ollama "Ollama"
;;   :host "127.0.0.1:11434"
;;   :stream t
;;   :models '(mistral:latest deepseek-coder-v2:latest))
;; OPTIONAL configuration

(use-package! gptel
 :config
 (setq! gptel-api-key gpt-api-key))

;; Github Models offers an OpenAI compatible API

(add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)

(add-hook 'gptel-post-response-functions 'gptel-end-of-response)

(map! :leader
      :prefix ("o" . "open")
      "c" #'gptel)

(map! :leader
      :prefix ("l" . "GPT")
      "r" #'gptel-rewrite
      "a" #'gptel--rewrite-accept)

(map! :localleader
      "c" #'gptel--infix-context-add-file
      "m" #'gptel-menu
      "r" #'gptel-context-remove-all)
  #+end_src
** Elfeed
:Elfeed-Docs:  https://github.com/skeeto/elfeed?tab=readme-ov-file
:Elfeed-Score-Docs: https://www.unwoundstack.com/doc/elfeed-score/curr
*** TODO Implement Bongo: https://protesilaos.com/codelog/2020-09-11-emacs-elfeed-bongo/
*** Configurations
#+begin_src elisp :tangle ./config.el
(use-package! elfeed-score
  :ensure t
  :config
  (progn
    (elfeed-score-enable)
    (define-key elfeed-search-mode-map "=" elfeed-score-map)))
(setq elfeed-search-print-entry-function #'elfeed-score-print-entry)
(setq elfeed-score-serde-score-file "/home/devindavis/.doom.d/score.el")
(map! :leader
      :prefix ("o" . "open")
      "r" #'elfeed)

(after! elfeed
  (map! :localleader
        :map elfeed-search-mode-map
        "u" #'elfeed-update
        "e" #'elfeed-score-explain
        "s" #'elfeed-search-set-filter
        "y" #'elfeed-search-yank
        "f" #'elfeed-search-live-filter
        "b" #'elfeed-search-browse-url))

(elfeed-search-set-filter  "@3-days-ago")
#+end_src
** Kubernetes El
*** Configuration
#+begin_src elisp :tangle ./config.el
;;Docs: https://kubernetes-el.github.io/kubernetes-el/
(use-package! kubernetes
  :ensure t
  :commands (kubernetes-overview)
  :config
  (setq kubernetes-poll-frequency 3600
        kubernetes-redraw-frequency 3600))

(map! :leader
      :prefix "o"
      "k" #'kubernetes-overview)

(after! kubernetes
  (map! :localleader
        :map kubernetes-overview-mode-map
        "s" #'kubernetes-display-service
        "p" #'kubernetes-display-pod
        "r" #'kubernetes-refresh
        "l" #'kubernetes-logs
        "e" #'kubernetes-edit
        "d" #'kubernetes-describe
        "n" #'kubernetes-set-namespace))
#+end_src
** Ledger
*** Configuration
#+begin_src elisp :tangle ./config.el
(setq! ledger-schedule-file "~/org/schedual.ledger")
(with-eval-after-load 'ledger-mode
  (add-to-list 'ledger-reports
               '("budget" "ledger bal --budget Expenses -f ~/org/2025.ledger")))
(defun ledger-analytic-start ()
  "Start the 'ledger-analytics' server on port 3000."
  (interactive)
  (let ((buffer-name "*Ledger Analytics Server*"))
    (if (get-buffer buffer-name)
        (message "Ledger Analytics server is already running.")
      (progn
        (start-process "ledger-analytics-process" buffer-name
                       "ledger-analytics" "-f" "~/org/2025.ledger")
        (message "Ledger Analytics server started on port 3000.")))))

(map! :localleader
      :map ledger-mode-map
      "s" #'evil-ledger-align)

#+end_src
** Anzu
*** Configuration
#+begin_src elisp :tangle ./config.el
(map! :leader
      :prefix "c"
      "R" #'query-replace)
#+end_src
** Terraform
*** Configuration
#+begin_src elisp :tangle ./config.el
(map! :localleader
      :map terraform-mode-map
      "d" #'terraform-open-doc)
#+end_src
** Logview
*** Configuration
#+begin_src elisp :tangle ./config.el
(setq logview-additional-submodes
      '(("Pino JSON Logs"
         (format . "JSON")
         (levels . "level")
         (timestamp . "time"))))
#+end_src
** MUE4
*** Configuration
#+begin_src elisp :tangle ./config.el
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")

(setq auth-sources '("~/.authinfo.gpg" "~/.authinfo"))

(if (memq window-system '(mac ns x))
    (set-email-account! "devin.davis@eventtemple.com"
    '((mu4e-sent-folder . "/Sent Items")
        (mu4e-drafts-folder . "/Drafts")
        (mu4e-trash-folder . "/Trash")
        (mu4e-get-mail-command . "offlineimap -o")
        (mu4e-update-interval . 60)
        (smtpmail-smtp-user . "devin")
        (smtpmail-smtp-server . "smtp.google.com")
        (smtpmail-smtp-service . 465)
        (smtpmail-stream-type . ssl)
        (auth-source-debug t)
        (mail-host-address . "eventtemple.com")
        (user-full-name . "Devin")
        (user-mail-address . "devin.davis@eventtemple.com")
        (mu4e-compose-signature . "\nBest,\nDev\nSoftware Developer"))
    t)
    (set-email-account! "devin@devdeveloper.ca"
    '((mu4e-sent-folder . "/Sent Items")
        (mu4e-drafts-folder . "/Drafts")
        (mu4e-trash-folder . "/Trash")
        (mu4e-get-mail-command . "offlineimap -o")
        (mu4e-update-interval . 60)
        (smtpmail-smtp-user . "devin")
        (smtpmail-smtp-server . "smtp.mailfence.com")
        (smtpmail-smtp-service . 465)
        (smtpmail-stream-type . ssl)
        (auth-source-debug t)
        (mail-host-address . "devdeveloper.ca")
        (user-full-name . "Devin")
        (user-mail-address . "devin@devdeveloper.ca")
        (mu4e-compose-signature . "\nBest,\nDev\nSoftware Developer | DevDeveloper.ca\nEmail: dev@devdeveloper.ca\nPhone: +1 (234) 567-8901\nLinkedIn: linkedin.com/in/devin-dev-d-63008412b\nGitHub: github.com/barnacleDevelopments"))
    t))

(setq! message-send-mail-function 'smtpmail-send-it)

(map! :leader
      :prefix ("o" . "open")
      "m" #'mu4e)

(map! :localleader
      :map mu4e-headers-mode-map
      "c" #'mu4e-thread-fold-toggle
      "m" #'mu4e-view-mark-for-move)
#+end_src
** Dired
#+begin_src elisp :tangle ./config.el
(map! :localleader
      :map dirvish-mode-map
      "R" #'query-replace
      "w" #'wdired-change-to-wdired-mode)
#+end_src
** Copilot
*** Configuration
#+begin_src elisp :tangle ./config.el
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word))
  )
#+END_SRC
** Org Jira
*** TODO add org jira configuration
https://github.com/ahungry/org-jira
#+begin_src elisp :tangle ./config.el
(setq jiralib-url "https://eventtemple.atlassian.net")

#+end_src
